
- const : ES6 문법에서  새로 도입되었으며, 한번 지정하고 나면 변경이 불가능한 상수 선억.
- let : 동적인 값을 담을 수 있는 변수 선언


- 컴포넌트 함수에서 undefined만 반환하면 안된다. JSX 내부에서 undefined를 렌더링하는 것은 괜찮다.

- 컴포넌트 선언 방식
   1. 함수형 컴포넌트
    1-1. 클래스형 컴포넌트보다 선언하기가 훨씬 편하다.
    1-2. 메모리 자원도 클래스형 컴포넌트보다 덜 사용한다.
    1-3. 단점은 state와 라이프사이클 API 사용이 불가능했지만 리액트 v16.8 업데이트 이후 Hooks라는 기능이 도입되면서 해결.
    1-4. 현재는 함수형 컴포넌트를 더 많이 사용하는 추세이나, 클래스형 컴포넌트의 역할도 꼭 알아두어야 한다.


   2. 클래스형 컴포넌트 : state 기능 및 라이프사이클 기능 사용 가능, 임의 메서드를 정의할 수 있음.
    2-1. 클래스형 컴포넌트에는 render 함수가 꼭 있어야 하고, 그 안에서 보여주어야 할 JSX를 반환해야 한다.


- 화살표 함수 : ES6 문법에서 함수를 표현하는 새로운 방식, 기존의 function을 이용한 함수 선언 방식을 아예 대체할 수는 없음. 사용용도가 조금 다름.
               화살표 함수는 주로 함수를 파라미터로 전달할 때 유용하다.


- props : properties를 줄인 표현으로 컴포넌트 속성을 설정할 때 사용하는 요소.
          props 값은 해당 컴포넌트를 불러와 사용하는 부모 컴포넌트에서 설정할 수 있다.

- defaultProps / propTypes  필수는 아니지만 다른 개발자들과 협업할 때 해당 컴포넌트에 어떤 props가 필요한지 쉽게 알 수 있어 개발 능률이 좋아질 것.
  => defaultProps : prop 값이 없을때 default로 넣어주는 값.
     propTypes : type, isRequired 등을 정할 수 있음.   

- state 
  => 컴포넌트 내부에서 바뀔 수 있는 값.
     props는 컴포넌트가 사용되는 과정에서 부모 컴포넌트가 설정하는 값,

- 클래스형 컴포넌트 : state (Counter.js)
 => 클래스형 컴포넌트에서 construct를 작성할 때는 반드시 super(props)를 호출해주어야 함.
    

- 함수형 컴포넌트 (Say.js) : userState 함수 / Hooks를 사용하는 것이 주요 컴포넌트 개발 방식이 될것이라고 리액트 개발팀이 얘기했다.. 

- 이벤트 (EventPractice.js) : 사용자가 웹 브라우저에서 DOM 요소들과 상호 작용 하는 것
 => 이벤트 이름은 카멜 표기법으로. onclick은 onClick으로, onkeyup은 onKeyUp으로
 => DOM 요소에만 이벤트 설정 가능. 컴포넌트에는 불가능 <MyComponent onClick={doSomeThing}> </MyComponent> 이건 그냥 onClick인 props를 MyComponent에 전달할 뿐..


- ref (ValidationSample.js): 특정 DOM에 작업을 해야 할 때 사용 
        id도 사용할 수 있지만 id는 유니크해야한다. 같은 컴포넌트를 여러번 사용했을때 문제가 발생한다.
      